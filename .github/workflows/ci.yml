name: ci

on: [push, pull_request]

jobs:
  build:
    name: ${{ matrix.kind }} ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]

    env:
      CARGO_INCREMENTAL: 0
      RUST_BACKTRACE: full
      CARGO_TERM_COLOR: always

    steps:
      - name: Clone repository
        uses: actions/checkout@v3

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Install rust
        uses: hecrj/setup-rust-action@v1

      - name: Install clippy and rustfmt
        run: |
          rustup component add clippy
          rustup component add rustfmt

      - name: Install node
        uses: actions/setup-node@v3

      - name: Install Deno
        uses: denoland/setup-deno@v1

      - name: Log versions
        run: |
          rustc --version
          cargo --version
          node --version
          deno --version

      - name: Configure cargo data directory
        # After this point, all cargo registry and crate data is stored in
        # $GITHUB_WORKSPACE/.cargo_home. This allows us to cache only the files
        # that are needed during the build process. Additionally, this works
        # around a bug in the 'cache' action that causes directories outside of
        # the workspace dir to be saved/restored incorrectly.
        run: |
          echo "CARGO_HOME=$(pwd)/.cargo_home" >> $GITHUB_ENV

      - name: Cache cargo dependencies
        uses: actions/cache@v2
        with:
          path: |-
            .cargo_home
            target/*/.*
            target/*/build
            target/*/deps
          key:
            ${{ matrix.config.os }}-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            ${{ matrix.config.os }}-

      - name: Cache NPM dependencies
        uses: actions/cache@v3
        with:
          path: .yarn/cache
          key: npm-cache-${{ matrix.settings.target }}-${{ matrix.node }}-${{ hashFiles('yarn.lock') }}

      - name: Install dependencies
        run: yarn install

      - name: Build web
        run: yarn build

      - name: Run cargo fmt
        run: cargo fmt --all -- --check
        working-directory: src-tauri

      - name: Run cargo check
        run: cargo check --locked
        working-directory: src-tauri

      - name: Run cargo clippy
        run: cargo clippy -- -D warnings
        working-directory: src-tauri

      - name: Run cargo test
        run: cargo test --locked
        working-directory: src-tauri

      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: v__VERSION__
          releaseName: "App v__VERSION__"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: true
          prerelease: false
